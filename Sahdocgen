/******************************************************************************************
 * MC_SAHOpportunityDocGen_Direct
 * Support at Home Agreement – Direct Field Mapping (NO Document_Mappings__c)
 *
 * Model (from Opportunity):
 *   Parents:  Account (Opportunity.AccountId), Funding (Opportunity.Funding__c)
 *   Children: From Account -> CCR (ContactContactRelation, PoA only)
 *             From Funding -> Funding Items (maica_cc__Funding_Item__c)
 *
 * Tokens created:
 *   Opportunity.* , Account.* ,
 *   Funding.* , FundingItemList[] ,
 *   CCRList[] ,
 *   showPartG_AT_HM, showPartH_Restorative, showPartI_EndOfLife
 ******************************************************************************************/
public without sharing class MC_SAHOpportunityDocGen_Direct {

    public class Wrapper {
        @InvocableVariable(required=true)
        public List<Id> recordIds;                 // Opportunity Id(s) – first used
        @InvocableVariable(required=true)
        public String docTemplateName;             // DocumentTemplate.Name
        @InvocableVariable(required=true)
        public String templateContentVersionId;    // ContentVersion.Id
    }

    @InvocableMethod(label='Generate SAH Agreement (Direct)')
    public static void generateFromFlow(List<Wrapper> inputs) {
        if (inputs == null || inputs.isEmpty() || inputs[0].recordIds == null || inputs[0].recordIds.isEmpty()) {
            throw new AuraHandledException('No Opportunity Id provided.');
        }
        process(inputs[0]);
    }

    private static void process(Wrapper w) {
        Id oppId = w.recordIds[0];

        // --- Opportunity (explicit fields; add more if you need them in the doc)
        Opportunity opp = [
            SELECT Id, Name, StageName, CloseDate, Amount,
                   AccountId, Funding__c, Funding_Source__c
            FROM Opportunity
            WHERE Id = :oppId
            LIMIT 1
        ];

        // Only generate for Support at Home
        if (opp.Funding_Source__c != 'Support at Home') return;

        // --- Parent #1: Account
        Account acc = null;
        if (opp.AccountId != null) {
            acc = [
                SELECT Id, Name, Phone, PersonMobilePhone, PersonEmail,
                       BillingStreet, BillingCity, BillingState, BillingPostalCode,
                       PersonContactId, FirstName, LastName, Date_of_Birth__c
                FROM Account
                WHERE Id = :opp.AccountId
                LIMIT 1
            ];
        }

        // --- Parent #2: Funding (via Opportunity.Funding__c)
        // NOTE: Field APIs like Start/End/Type may be different in your org.
        // Adjust below if needed.
        maica_cc__Funding__c funding = null;
        if (opp.Funding__c != null) {
            funding = [
                SELECT Id, Name,
                       maica_cc__Start_Date__c,
                       maica_cc__End_Date__c,
                       Funding_Type__c
                FROM maica_cc__Funding__c
                WHERE Id = :opp.Funding__c
                LIMIT 1
            ];
        }

        // --- Child of Funding: Funding Items
        List<maica_cc__Funding_Item__c> fundingItemList = new List<maica_cc__Funding_Item__c>();
        if (funding != null) {
            fundingItemList = [
                SELECT Id, Name,
                       maica_cc__Budget_Type__c,
                       maica_cc__Approved_Amount__c,
                       maica_cc__Spent_Amount__c,
                       maica_cc__Remaining_Amount__c,
                       maica_cc__Entry_Date__c,
                       maica_cc__Effective_Date__c,
                       maica_cc__End_Date__c,
                       maica_cc__Funding__c
                FROM maica_cc__Funding_Item__c
                WHERE maica_cc__Funding__c = :funding.Id
            ];
        }

        // --- Child of Account: CCR (PoA only) via PersonContact
        List<ContactContactRelation> ccrList = new List<ContactContactRelation>();
        if (acc != null && acc.PersonContactId != null) {
            ccrList = [
                SELECT Id, ContactId, RelatedContactId,
                       Power_of_Attorney__c, Relationship__c, Next_of_Kin__c,
                       RelatedContact.Name, RelatedContact.Phone, RelatedContact.Email,
                       RelatedContact.MailingStreet, RelatedContact.MailingCity,
                       RelatedContact.MailingState, RelatedContact.MailingPostalCode
                FROM ContactContactRelation
                WHERE ContactId = :acc.PersonContactId
                  AND Power_of_Attorney__c != null
            ];
        }

        // --- Section flags (from Funding Items' Budget Type)
        Boolean showPartG_AT_HM = false;
        Boolean showPartH_Restorative = false;
        Boolean showPartI_EndOfLife = false;
        for (maica_cc__Funding_Item__c fi : fundingItemList) {
            String bt = fi.maica_cc__Budget_Type__c;
            if (bt == null) continue;
            bt = bt.trim();
            if (bt == 'Assistive technology' || bt == 'Home modifications' || bt == 'Assistive technology specified needs') showPartG_AT_HM = true;
            if (bt == 'Restorative care pathway') showPartH_Restorative = true;
            if (bt == 'End of life pathway')      showPartI_EndOfLife  = true;
        }

        // --- Token map (DIRECT)
        Map<String, Object> token = new Map<String, Object>();

        // Opportunity tokens
        token.put('OppName', opp.Name);
        token.put('OppStage', opp.StageName);
        token.put('OppCloseDate', formatDate(opp.CloseDate));
        token.put('OppAmount', formatCurrency(opp.Amount));
        token.put('FundingSource', opp.Funding_Source__c);

        // Account tokens
        if (acc != null) {
            token.put('AccountName', acc.Name);
            token.put('AccountFirstName', acc.FirstName);
            token.put('AccountLastName', acc.LastName);
            token.put('AccountDOB', formatDate(acc.Date_of_Birth__c));
            token.put('AccountPhone', acc.Phone);
            token.put('AccountMobile', acc.PersonMobilePhone);
            token.put('AccountEmail', acc.PersonEmail);
            token.put('AccountBillingAddress', formatAddress(acc.BillingStreet, acc.BillingCity, acc.BillingState, acc.BillingPostalCode));
        }

        // Funding tokens (single parent)
        if (funding != null) {
            token.put('FundingName', funding.Name);
            token.put('FundingStartDate', formatDate(funding.maica_cc__Start_Date__c));
            token.put('FundingEndDate',   formatDate(funding.maica_cc__End_Date__c));
            token.put('FundingType',      funding.Funding_Type__c); // per your note: no namespace on field
        }

        // CCR list tokens
        List<Map<String, Object>> ccrOut = new List<Map<String, Object>>();
        Integer cIdx = 0;
        for (ContactContactRelation ccr : ccrList) {
            cIdx++;
            Map<String, Object> row = new Map<String, Object>();
            row.put('RelatedContactName',   ccr.RelatedContact != null ? ccr.RelatedContact.Name  : null);
            row.put('RelatedContactPhone',  ccr.RelatedContact != null ? ccr.RelatedContact.Phone : null);
            row.put('RelatedContactEmail',  ccr.RelatedContact != null ? ccr.RelatedContact.Email : null);
            row.put('RelatedContactAddress', formatAddress(
                ccr.RelatedContact != null ? ccr.RelatedContact.MailingStreet : null,
                ccr.RelatedContact != null ? ccr.RelatedContact.MailingCity   : null,
                ccr.RelatedContact != null ? ccr.RelatedContact.MailingState  : null,
                ccr.RelatedContact != null ? ccr.RelatedContact.MailingPostalCode : null
            ));
            row.put('PowerOfAttorney', ccr.Power_of_Attorney__c);
            row.put('Relationship',    ccr.Relationship__c);
            row.put('IsNextOfKin',     ccr.Next_of_Kin__c);
            row.put('RowNumber',       cIdx);
            ccrOut.add(row);
        }
        token.put('CCRList', ccrOut);

        // Funding Item list tokens (+ slab + display)
        List<Map<String,Object>> fiOut = new List<Map<String,Object>>();
        for (maica_cc__Funding_Item__c fi : fundingItemList) {
            Map<String,Object> row = new Map<String,Object>();
            row.put('FundingItemName', fi.Name);
            row.put('BudgetType', fi.maica_cc__Budget_Type__c);

            // raw
            row.put('ApprovedAmount',  fi.maica_cc__Approved_Amount__c);
            row.put('SpentAmount',     fi.maica_cc__Spent_Amount__c);
            row.put('RemainingAmount', fi.maica_cc__Remaining_Amount__c);
            row.put('EntryDate',       formatDate(fi.maica_cc__Entry_Date__c));
            row.put('EffectiveDate',   formatDate(fi.maica_cc__Effective_Date__c));
            row.put('EndDate',         formatDate(fi.maica_cc__End_Date__c));

            // display
            row.put('Approved_Amount_Display',   formatCurrency(fi.maica_cc__Approved_Amount__c));
            row.put('Spent_Amount_Display',      formatCurrency(fi.maica_cc__Spent_Amount__c));
            row.put('Remaining_Amount_Display',  formatCurrency(fi.maica_cc__Remaining_Amount__c));

            // tier by range
            row.put('FundingTier', classifyTier(fi.maica_cc__Approved_Amount__c));

            fiOut.add(row);
        }
        token.put('FundingItemList', fiOut);

        // Section flags
        token.put('showPartG_AT_HM', showPartG_AT_HM);
        token.put('showPartH_Restorative', showPartH_Restorative);
        token.put('showPartI_EndOfLife', showPartI_EndOfLife);

        // --- Generate
        DocumentTemplate tmpl = [
            SELECT Id, Name
            FROM DocumentTemplate
            WHERE Name = :w.docTemplateName AND IsActive = true
            LIMIT 1
        ];

        Map<String, Object> req = new Map<String, Object>{
            'templateContentVersionId' => w.templateContentVersionId,
            'title'                    => w.docTemplateName + '_' + (acc != null ? acc.Name : opp.Name),
            'keepIntermediate'         => false
        };

        DocumentGenerationProcess dgp = new DocumentGenerationProcess();
        dgp.Type                 = 'GenerateAndConvert';
        dgp.RequestText          = JSON.serialize(req);
        dgp.ReferenceObject      = opp.Id;
        dgp.TokenData            = JSON.serialize(token);
        dgp.DocGenApiVersionType = 'Advanced';
        dgp.DocumentTemplateId   = tmpl.Id;

        if (!Test.isRunningTest()) insert dgp;
    }

    // ===== Helpers =====
    private static String formatDate(Date d) {
        if (d == null) return '';
        return Datetime.newInstance(d.year(), d.month(), d.day(), 0, 0, 0).format('dd/MM/yyyy');
    }
    private static String formatCurrency(Decimal v) {
        if (v == null) return '';
        return '$' + String.valueOf(v.setScale(2));
    }
    private static String formatAddress(String st, String city, String state, String pcode) {
        List<String> parts = new List<String>();
        if (!String.isBlank(st)) parts.add(st);
        if (!String.isBlank(city)) parts.add(city);
        if (!String.isBlank(state)) parts.add(state);
        if (!String.isBlank(pcode)) parts.add(pcode);
        return String.join(parts, ', ');
    }
    private static String classifyTier(Decimal amt) {
        if (amt == null) return '';
        if (amt <= 500)        return '$0 - $500';
        if (amt <= 2000)       return '$501 - $2000';
        if (amt <= 15000)      return '$2001 - $15000';
        return 'Above $15000';
    }
}
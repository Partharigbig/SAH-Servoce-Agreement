public without sharing class MC_OpportunityDocGen_Agreements {

    // ===== Invocable wrapper (Flow input) ===================================
    public class Wrapper {
        @InvocableVariable(required=true)
        public List<Id> recordIds;                  // Opportunity Id(s) â€“ first used

        // Optional direct overrides (rarely needed)
        @InvocableVariable public String templateContentVersionId;     // ContentVersion.Id (overrides ENV)
        @InvocableVariable public String docTemplateName;              // DocumentTemplate.Name (required once via Flow)
    }

    @InvocableMethod(label='Generate Agreement (auto by Funding Source)')
    public static void generateFromFlow(List<Wrapper> inputs) {
        if (inputs == null || inputs.isEmpty() || inputs[0] == null ||
            inputs[0].recordIds == null || inputs[0].recordIds.isEmpty()) {
            throw new AuraHandledException('No Opportunity Id provided.');
        }
        process(inputs[0]);
    }

    // ===== Core ==============================================================
    private static void process(Wrapper w) {
        final Id oppId = w.recordIds[0];

        // --- Opportunity
        Opportunity opp = [
            SELECT Id, Name, StageName, CloseDate, Amount,
                   AccountId, Funding_Source__c,
                   Agreement_Start_Date__c, Agreement_End_Date__c,
                   Funding_Administrator__c
            FROM Opportunity
            WHERE Id = :oppId
            LIMIT 1
        ];

        // --- Primary Account (participant)
        Account acc = opp.AccountId == null ? null :
            [SELECT Id, Name, Salutation, FirstName, LastName, Region__c,
                    Phone, PersonMobilePhone, PersonEmail,
                    BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry,
                    Home_Address__Street__s, Home_Address__City__s, Home_Address__StateCode__s,
                    Home_Address__PostalCode__s, Home_Address__CountryCode__s
             FROM Account
             WHERE Id = :opp.AccountId
             LIMIT 1];

        // --- Funding Administrator (lookup to Account on Opportunity)
        Account fundingAdmin = opp.Funding_Administrator__c == null ? null :
            [SELECT Id, Name, PersonEmail, PersonMobilePhone,
                    BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry
             FROM Account
             WHERE Id = :opp.Funding_Administrator__c
             LIMIT 1];

        // --- Token map (keep keys aligned to your DOCX merge field names)
        Map<String,Object> token = new Map<String,Object>();

        // Opportunity tokens
        token.put('Opportunity.Service_Start_Date__c', formatDate(opp.Agreement_Start_Date__c));
        token.put('Opportunity.Service_End_Date__c',   formatDate(opp.Agreement_End_Date__c));
        token.put('Opportunity.Funding_Source__c',     opp.Funding_Source__c);
        token.put('Opportunity.Name',                  opp.Name);

        // Account tokens (participant)
        if (acc != null) {
            token.put('Account.Name', acc.Name);
            token.put('Account.Salutation', acc.Salutation);
            token.put('Account.PersonMobilePhone', acc.PersonMobilePhone);
            token.put('Account.Region', acc.Region__c);
            token.put('Account.BillingAddress',
                formatAddress(acc.BillingStreet, acc.BillingCity, acc.BillingState,
                              acc.BillingPostalCode, acc.BillingCountry));
            token.put('Account.HomeAddress',
                formatAddress(acc.Home_Address__Street__s, acc.Home_Address__City__s,
                              acc.Home_Address__StateCode__s, acc.Home_Address__PostalCode__s,
                              acc.Home_Address__CountryCode__s));
        }

        // Funding Administrator tokens
        if (fundingAdmin != null) {
            token.put('Funding_Administrator__c.Name', fundingAdmin.Name);
            token.put('Funding_Administrator__c.PersonEmail', fundingAdmin.PersonEmail);
            token.put('Funding_Administrator__c.PersonMobilePhone', fundingAdmin.PersonMobilePhone);
            token.put('Funding_Administrator__c.BillingAddress',
                formatAddress(fundingAdmin.BillingStreet, fundingAdmin.BillingCity,
                              fundingAdmin.BillingState, fundingAdmin.BillingPostalCode,
                              fundingAdmin.BillingCountry));
        }

        // ===== Select the correct ContentVersion dynamically by Funding Source
        // ENV var DeveloperNames you must create in Environment_Variables__mdt:
        //  - SAH_Agreement_ContentId        (Value__c = ContentDocumentId)
        //  - Service_Agreement_ContentId    (Value__c = ContentDocumentId)
        String funding = opp.Funding_Source__c == null ? '' : opp.Funding_Source__c.trim();
        String envDevName = (funding == 'Support at Home')
                            ? 'SAH_Agreement_ContentId'
                            : 'Service_Agreement_ContentId';

        // Allow direct override from Flow if provided
        String contentVersionId = w.templateContentVersionId;

        if (String.isBlank(contentVersionId)) {
            Map<String,String> envMap = getEnvValuesByNames(new Set<String>{ envDevName });
            String contentDocumentIdStr = envMap.get(envDevName);
            if (String.isBlank(contentDocumentIdStr)) {
                throw new AuraHandledException('Environment variable ' + envDevName +
                    ' has no Value__c (expected ContentDocumentId).');
            }
            Id contentDocumentId = (Id)contentDocumentIdStr;

            ContentVersion cv = [
                SELECT Id
                FROM ContentVersion
                WHERE ContentDocumentId = :contentDocumentId
                ORDER BY VersionNumber DESC NULLS LAST
                LIMIT 1
            ];
            contentVersionId = cv.Id;
        }

        // ===== Resolve DocumentTemplate to run mappings (single template name from Flow)
        // You can reuse the same DocumentTemplate for both SAH + general agreements.
        if (String.isBlank(w.docTemplateName)) {
            throw new AuraHandledException('docTemplateName is required (DocumentTemplate.Name).');
        }
        DocumentTemplate tmpl = [
            SELECT Id, Name
            FROM DocumentTemplate
            WHERE Name = :w.docTemplateName
            LIMIT 1
        ];

        // ===== Build request for WORD output (no PDF conversion)
        Map<String,Object> req = new Map<String,Object>{
            'templateContentVersionId' => contentVersionId,
            'title'                    => w.docTemplateName + '_' + (acc != null ? acc.Name : opp.Name),
            'keepIntermediate'         => false
        };

        DocumentGenerationProcess dgp = new DocumentGenerationProcess();
        dgp.Type                 = 'Generate';          // => WORD output
        dgp.RequestText          = JSON.serialize(req);
        dgp.ReferenceObject      = opp.Id;              // file under the Opportunity
        dgp.TokenData            = JSON.serialize(token);
        dgp.DocGenApiVersionType = 'Advanced';
        dgp.DocumentTemplateId   = tmpl.Id;

        if (!Test.isRunningTest()) insert dgp;
    }

    // ===== Helpers ===========================================================
    private static Map<String,String> getEnvValuesByNames(Set<String> developerNames) {
        Map<String,String> out = new Map<String,String>();
        if (developerNames == null || developerNames.isEmpty()) return out;
        for (Environment_Variables__mdt ev :
             [SELECT DeveloperName, Value__c
              FROM Environment_Variables__mdt
              WHERE DeveloperName IN :developerNames]) {
            out.put(ev.DeveloperName, ev.Value__c);
        }
        return out;
    }

    private static String formatDate(Date d) {
        return d == null ? '' : d.format('dd/MM/yyyy');
    }

    private static String formatAddress(String street, String city, String state, String pcode, String country) {
        List<String> parts = new List<String>();
        if (!String.isBlank(street))  parts.add(street);
        if (!String.isBlank(city))    parts.add(city);
        if (!String.isBlank(state))   parts.add(state);
        if (!String.isBlank(pcode))   parts.add(pcode);
        if (!String.isBlank(country)) parts.add(country);
        return String.join(parts, ', ');
    }
}
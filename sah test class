@IsTest
private class MC_SAHOpportunityDocGen_Direct_Tests {

    @IsTest
    static void testGenerateFromFlow_withoutCMDT() {
        // --- Account (Person-Account style fields are fine to set even if org isn't PA)
        Account a = new Account(
            Name = 'Test Account',
            Phone = '0123456789',
            PersonEmail = 'person@test.com',
            Date_of_Birth__c = Date.today(),
            Home_Address__Street__s = '10 Test St',
            Home_Address__City__s = 'Melbourne',
            Home_Address__StateCode__s = 'VIC',
            Home_Address__PostalCode__s = '3000',
            Home_Address__CountryCode__s = 'AU'
        );
        insert a;

        // --- Funding & a Funding Item
        maica_cc__Funding__c f = new maica_cc__Funding__c(
            Name = 'Test Funding',
            maica_cc__Start_Date__c = Date.today(),
            maica_cc__End_Date__c = Date.today().addMonths(6),
            Funding_Type__c = 'NDIS'
        );
        insert f;

        insert new maica_cc__Funding_Item__c(
            Name = 'Item 1',
            maica_cc__Funding__c = f.Id,
            maica_cc__Budget_Type__c = 'Assistive technology',
            maica_cc__Approved_Amount__c = 1500,
            maica_cc__Entry_Date__c = Date.today(),
            maica_cc__Effective_Date__c = Date.today(),
            maica_cc__End_Date__c = Date.today().addMonths(6)
        );

        // --- Opportunity (Support at Home)
        Opportunity o = new Opportunity(
            Name = 'Test Opp',
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(10),
            AccountId = a.Id,
            Funding__c = f.Id,
            Funding_Source__c = 'Support at Home'
        );
        insert o;

        // --- Minimal, active DocumentTemplate
        DocumentTemplate tmpl = new DocumentTemplate(
            Name = 'SupportAtHomeAgreement_Direct',
            IsActive = true
        );
        insert tmpl;

        // --- ContentVersion to act as the uploaded DOCX (dummy blob ok in tests)
        ContentVersion cv = new ContentVersion(
            Title = 'SupportAtHomeAgreement',
            PathOnClient = 'SupportAtHomeAgreement.docx',
            VersionData = Blob.valueOf('dummy template bytes')
        );
        insert cv;

        // We need the **Id** of the version we just inserted
        cv = [SELECT Id FROM ContentVersion WHERE Id = :cv.Id];

        // --- Call the invocable using *direct overrides* (no CMDT)
        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ o.Id };
        w.docTemplateName = tmpl.Name;            // direct template name
        w.templateContentVersionId = cv.Id;       // direct ContentVersion.Id
        // (envContentDocVarName / envTemplateNameVarName left null on purpose)

        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        // Assert one DGP was created and points to the Opportunity
        DocumentGenerationProcess[] dgps = [
            SELECT Id, ReferenceObject, DocumentTemplateId, Type
            FROM DocumentGenerationProcess
        ];
        System.assertEquals(1, dgps.size(), 'Should create one DocumentGenerationProcess');
        System.assertEquals(o.Id, dgps[0].ReferenceObject, 'DGP should reference the Opportunity');
        System.assertEquals('GenerateAndConvert', dgps[0].Type, 'Type should be GenerateAndConvert');
        System.assertEquals(tmpl.Id, dgps[0].DocumentTemplateId, 'Should use our DocumentTemplate');
    }

    @IsTest
    static void testGuard_throwsWhenNoOppId() {
        // Ensure method guards properly
        Boolean thrown = false;
        Test.startTest();
        try {
            MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{
                new MC_SAHOpportunityDocGen_Direct.Wrapper()
            });
        } catch (AuraHandledException e) {
            thrown = e.getMessage().contains('No Opportunity Id');
        }
        Test.stopTest();
        System.assert(thrown, 'Expected AuraHandledException when no Opportunity Id is provided');
    }
}
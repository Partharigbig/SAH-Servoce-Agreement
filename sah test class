@IsTest
private class MC_SAHOpportunityDocGen_Direct_Tests {

    /* -------------------- Helpers -------------------- */

    // Person Account not required for these tests; a simple Account is enough.
    private static Account makeAccount() {
        Account a = new Account(
            Name = 'Acme Test Household'
        );
        // If you want to exercise the address formatter:
        a.Home_Address__Street__s     = '10 Test St';
        a.Home_Address__City__s       = 'Goondi Bend';
        a.Home_Address__StateCode__s  = 'QLD';
        a.Home_Address__PostalCode__s = '4860';
        a.Home_Address__CountryCode__s= 'AU';
        insert a;
        return a;
    }

    private static maica_cc__Funding__c makeFunding() {
        maica_cc__Funding__c f = new maica_cc__Funding__c(
            maica_cc__Start_Date__c = Date.today(),
            maica_cc__End_Date__c   = Date.today().addDays(30),
            Funding_Type__c         = 'NDIS' // adjust if your org uses a different value
        );
        insert f;
        return f;
    }

    private static maica_cc__Funding_Item__c makeFundingItem(Id fundingId, Decimal approved) {
        maica_cc__Funding_Item__c fi = new maica_cc__Funding_Item__c(
            maica_cc__Funding__c       = fundingId,
            maica_cc__Budget_Type__c   = 'Assistive technology', // one of the flags
            maica_cc__Approved_Amount__c  = approved,
            maica_cc__Spent_Amount__c     = 0,
            maica_cc__Remaining_Amount__c = approved,
            maica_cc__Entry_Date__c       = Date.today(),
            maica_cc__Effective_Date__c   = Date.today(),
            maica_cc__End_Date__c         = Date.today().addDays(7)
        );
        insert fi;
        return fi;
    }

    // Some orgs require a specific Record Type for Opportunity; this safely picks it if present.
    private static Id tryGetOppRT(String name) {
        Map<String, Schema.RecordTypeInfo> m = Schema.SObjectType.Opportunity.getRecordTypeInfosByName();
        return m.containsKey(name) ? m.get(name).getRecordTypeId() : null;
    }

    private static Opportunity makeOpp(Id accountId, Id fundingId, String fundingSource) {
        Opportunity opp = new Opportunity(
            Name = 'Support Home Opp',
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(10),
            AccountId = accountId,
            Funding__c = fundingId,
            Funding_Source__c = fundingSource,
            OwnerId = UserInfo.getUserId()
        );
        Id rt = tryGetOppRT('Support at Home'); // safe if it doesn't exist
        if (rt != null) opp.RecordTypeId = rt;
        insert opp;
        return opp;
    }

    // Minimal active Document Template
    private static DocumentTemplate makeTemplate(String name) {
        DocumentTemplate dt = new DocumentTemplate(
            Name     = name,
            IsActive = true
        );
        insert dt;
        return dt;
    }

    // Create a ContentVersion (and hence a ContentDocument) we can point doc gen at
    private static ContentVersion makeContentVersion() {
        Blob b = Blob.valueOf('test doc body');
        ContentVersion cv = new ContentVersion(
            Title = 'UnitTestTemplate',
            PathOnClient = 'UnitTestTemplate.docx',
            VersionData = b
        );
        insert cv;
        return [
            SELECT Id, ContentDocumentId, VersionNumber
            FROM ContentVersion
            WHERE Id = :cv.Id
            LIMIT 1
        ];
    }

    /* -------------------- Tests -------------------- */

    @IsTest
    static void testGuard_throwsWhenNoOppId() {
        Boolean thrown = false;
        Test.startTest();
        try {
            MC_SAHOpportunityDocGen_Direct.generateFromFlow(
                new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{
                    new MC_SAHOpportunityDocGen_Direct.Wrapper()
                }
            );
        } catch (AuraHandledException e) {
            thrown = e.getMessage().contains('No Opportunity Id');
        }
        Test.stopTest();
        System.assert(thrown, 'Expected AuraHandledException when no Opportunity Id.');
    }

    @IsTest
    static void testNonSAH_noDGPInserted() {
        Account a = makeAccount();
        maica_cc__Funding__c f = makeFunding();
        // Funding Item present, but Funding_Source__c is NOT Support at Home (non-SAH path)
        makeFundingItem(f.Id, 1000);

        Opportunity opp = makeOpp(a.Id, f.Id, 'Some Other Source');

        // Template + CV (not used in this path, but safe to create)
        DocumentTemplate dt = makeTemplate('SupportAtHomeAgreement_Direct');
        ContentVersion cv   = makeContentVersion();

        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ opp.Id };
        w.docTemplateName = dt.Name;
        w.templateContentVersionId = cv.Id;

        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        // Should NOT create DocumentGenerationProcess, because guard exits on non-SAH.
        List<DocumentGenerationProcess> dgps = [
            SELECT Id FROM DocumentGenerationProcess WHERE ReferenceObject = :opp.Id
        ];
        System.assertEquals(0, dgps.size(), 'Non-SAH path should not insert DGP.');
    }

    @IsTest
    static void testSAH_insertsDGP() {
        Account a = makeAccount();
        maica_cc__Funding__c f = makeFunding();
        makeFundingItem(f.Id, 2500); // ensures a tier path is set

        Opportunity opp = makeOpp(a.Id, f.Id, 'Support at Home');

        // Provide Template + ContentVersion directly; we are not using CMDT in tests.
        String tmplName = 'SupportAtHomeAgreement_Direct';
        DocumentTemplate dt = makeTemplate(tmplName);
        ContentVersion cv   = makeContentVersion();

        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ opp.Id };
        w.docTemplateName = dt.Name;                 // direct
        w.templateContentVersionId = cv.Id;          // direct

        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        // Validate a DGP was created for this Opportunity
        List<DocumentGenerationProcess> dgps = [
            SELECT Id, ReferenceObject, DocumentTemplateId, Type, DocGenApiVersionType
            FROM DocumentGenerationProcess
            WHERE ReferenceObject = :opp.Id
        ];
        System.assertEquals(1, dgps.size(), 'Expected exactly one DGP for SAH run.');
        System.assertEquals('GenerateAndConvert', dgps[0].Type, 'DGP Type mismatch');
        System.assertEquals('Advanced', dgps[0].DocGenApiVersionType, 'DGP API type mismatch');
        System.assertEquals(opp.Id, dgps[0].ReferenceObject, 'DGP should be linked to Opportunity');
    }
}
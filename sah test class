@IsTest
private class MC_SAHOpportunityDocGen_Direct_Tests {

    // Utility: make a ContentVersion and return both Version + Document Ids
    private class CVWrap {
        Id contentVersionId;
        Id contentDocumentId;
    }
    private static CVWrap makeContentVersion() {
        ContentVersion cv = new ContentVersion(
            Title        = 'TEST_SAH.docx',
            PathOnClient = 'TEST_SAH.docx',
            VersionData  = Blob.valueOf('dummy')
        );
        insert cv;
        // After insert, query back to get ContentDocumentId
        cv = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id = :cv.Id LIMIT 1];
        CVWrap w = new CVWrap();
        w.contentVersionId  = cv.Id;
        w.contentDocumentId = cv.ContentDocumentId;
        return w;
    }

    // Utility: person account (so CCR can reference PersonContactId)
    private static Account makePersonAccount() {
        Id paRtId = [SELECT Id FROM RecordType WHERE SObjectType='Account' AND IsPersonType = true LIMIT 1].Id;
        Account a = new Account(
            RecordTypeId       = paRtId,
            LastName           = 'Bugs',
            FirstName          = 'Huell',
            PersonEmail        = 'huell@example.com',
            PersonMobilePhone  = '0412000111',
            Phone              = '0390001111',
            Date_of_Birth__c   = Date.newInstance(1950, 5, 12),
            // Your class selects Home_Address__*; no need to set, but safe to include simple values
            Home_Address__Street__s     = '10 Dickson Road',
            Home_Address__City__s       = 'Goondi Bend',
            Home_Address__StateCode__s  = 'QLD',
            Home_Address__PostalCode__s = '4860',
            Home_Address__CountryCode__s= 'AU'
        );
        insert a;
        return a;
    }

    private static maica_cc__Funding__c makeFunding() {
        maica_cc__Funding__c f = new maica_cc__Funding__c(
            Name                   = 'FUND-TEST',
            maica_cc__Start_Date__c= Date.today().addDays(-10),
            maica_cc__End_Date__c  = Date.today().addDays(90),
            Funding_Type__c        = 'Support at Home'
        );
        insert f;
        return f;
    }

    private static Opportunity makeOpp(Account a, maica_cc__Funding__c f) {
        Opportunity o = new Opportunity(
            Name               = 'SAH Opp',
            StageName          = 'Prospecting',
            CloseDate          = Date.today().addDays(30),
            Amount             = 1000,
            AccountId          = a.Id,
            Funding__c         = f.Id,
            Funding_Source__c  = 'Support at Home'
        );
        insert o;
        return o;
    }

    private static List<maica_cc__Funding_Item__c> makeFundingItems(Id fundingId) {
        List<maica_cc__Funding_Item__c> rows = new List<maica_cc__Funding_Item__c>();
        rows.add(new maica_cc__Funding_Item__c(
            Name                         = 'AT Tier',
            maica_cc__Funding__c         = fundingId,
            maica_cc__Budget_Type__c     = 'Assistive technology',
            maica_cc__Approved_Amount__c = 2000,
            maica_cc__Spent_Amount__c    = 50,
            maica_cc__Remaining_Amount__c= 1950,
            maica_cc__Entry_Date__c      = Date.today().addDays(-5),
            maica_cc__Effective_Date__c  = Date.today().addDays(-3),
            maica_cc__End_Date__c        = Date.today().addDays(60)
        ));
        rows.add(new maica_cc__Funding_Item__c(
            Name                         = 'Restorative',
            maica_cc__Funding__c         = fundingId,
            maica_cc__Budget_Type__c     = 'Restorative care pathway',
            maica_cc__Approved_Amount__c = 400,
            maica_cc__Spent_Amount__c    = 0,
            maica_cc__Remaining_Amount__c= 400
        ));
        insert rows;
        return rows;
    }

    private static Contact makeContact(String ln) {
        Contact c = new Contact(LastName = ln, Phone = '0400000000', Email = ln.toLowerCase()+'@example.com');
        insert c;
        return c;
    }

    private static void makeCCR(Account personAcc, Contact related, Boolean poaTrue) {
        // link via Account.PersonContactId
        ContactContactRelation ccr = new ContactContactRelation(
            ContactId              = personAcc.PersonContactId,
            RelatedContactId       = related.Id,
            Relationship__c        = 'Carer',
            Next_of_Kin__c         = false,
            Power_of_Attorney__c   = poaTrue
        );
        insert ccr;
    }

    private static DocumentTemplate makeTemplate(String name) {
        // You only query Id, Name, IsActive=true
        DocumentTemplate dt = new DocumentTemplate(
            Name     = name,
            IsActive = true
        );
        insert dt;
        return dt;
    }

    /* ===================== TESTS ===================== */

    @IsTest
    static void test_HappyPath_withEnvVariables() {
        // Data
        Account a = makePersonAccount();
        maica_cc__Funding__c f = makeFunding();
        Opportunity o = makeOpp(a, f);
        makeFundingItems(f.Id);

        Contact rel = makeContact('Helper');
        makeCCR(a, rel, true);

        // Template + File to generate from
        String tmplName = 'SupportAtHomeAgreement';
        makeTemplate(tmplName);
        CVWrap cvw = makeContentVersion();

        // CMDT (Environment Variables): names must match what Flow passes
        Environment_Variables__mdt ev1 = new Environment_Variables__mdt(
            DeveloperName = 'SAH_Agreement_ContentDoc',
            MasterLabel   = 'SAH_Agreement_ContentDoc',
            Value__c      = String.valueOf(cvw.contentDocumentId) // store ContentDocumentId
        );
        Environment_Variables__mdt ev2 = new Environment_Variables__mdt(
            DeveloperName = 'SAH_Agreement_TemplateName',
            MasterLabel   = 'SAH_Agreement_TemplateName',
            Value__c      = tmplName
        );
        insert new List<Environment_Variables__mdt>{ ev1, ev2 };

        // Invoke
        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ o.Id };
        w.envContentDocVarName   = 'SAH_Agreement_ContentDoc';
        w.envTemplateNameVarName = 'SAH_Agreement_TemplateName';
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        // Since insert is skipped under test context, assert simply that no exception occurred,
        // and (optionally) that no DocumentGenerationProcess was inserted.
        System.assertEquals(0, [SELECT COUNT() FROM DocumentGenerationProcess]);
    }

    @IsTest
    static void test_HappyPath_withDirectOverrides() {
        Account a = makePersonAccount();
        maica_cc__Funding__c f = makeFunding();
        Opportunity o = makeOpp(a, f);
        makeFundingItems(f.Id);

        Contact rel = makeContact('Buddy');
        makeCCR(a, rel, true);

        // Template + ContentVersion
        String tmplName = 'SupportAtHomeAgreement_Direct';
        makeTemplate(tmplName);
        CVWrap cvw = makeContentVersion();

        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ o.Id };
        w.docTemplateName = tmplName;
        w.templateContentVersionId = cvw.contentVersionId; // direct override
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        System.assertEquals(0, [SELECT COUNT() FROM DocumentGenerationProcess]);
    }

    @IsTest
    static void test_NoRecordId_throws() {
        Test.startTest();
        Boolean threw = false;
        try {
            MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
            // no recordIds
            MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        } catch (AuraHandledException e) {
            threw = true;
            System.assert(e.getMessage().contains('No Opportunity Id'), 'Expected missing Opp Id error.');
        }
        Test.stopTest();
        System.assert(threw, 'Should have thrown AuraHandledException for missing Opp Id.');
    }
}
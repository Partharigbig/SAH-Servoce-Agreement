@IsTest
private class MC_SAHOpportunityDocGen_Direct_Tests {

    // ------------ helpers ------------
    private class CVWrap {
        Id contentVersionId;
        Id contentDocumentId;
    }
    private static CVWrap makeContentVersion() {
        ContentVersion cv = new ContentVersion(
            Title        = 'TEST_SAH.docx',
            PathOnClient = 'TEST_SAH.docx',
            VersionData  = Blob.valueOf('dummy doc body')
        );
        insert cv;
        cv = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id = :cv.Id];
        CVWrap w = new CVWrap();
        w.contentVersionId  = cv.Id;
        w.contentDocumentId = cv.ContentDocumentId;
        return w;
    }

    private static Account makePersonAccount() {
        Id paRtId = [SELECT Id FROM RecordType WHERE SObjectType='Account' AND IsPersonType = true LIMIT 1].Id;
        Account a = new Account(
            RecordTypeId                 = paRtId,
            LastName                     = 'Babeneaux',
            FirstName                    = 'Huell',
            Phone                        = '0390001111',
            PersonMobilePhone            = '0412000111',
            PersonEmail                  = 'huell@example.com',
            Date_of_Birth__c             = Date.newInstance(1950,5,12),
            // your custom Home Address compound parts:
            Home_Address__Street__s      = '10 Dickson Road',
            Home_Address__City__s        = 'GOONDI BEND',
            Home_Address__StateCode__s   = 'QLD',
            Home_Address__PostalCode__s  = '4860',
            Home_Address__CountryCode__s = 'AU'
        );
        insert a;
        return a;
    }

    private static maica_cc__Funding__c makeFunding() {
        maica_cc__Funding__c f = new maica_cc__Funding__c(
            maica_cc__Start_Date__c = Date.today().addDays(-5),
            maica_cc__End_Date__c   = Date.today().addDays(60),
            Funding_Type__c         = 'Support at Home'
        );
        insert f;
        return f;
    }

    private static Opportunity makeOpp(Account a, maica_cc__Funding__c f) {
        Opportunity o = new Opportunity(
            Name              = 'SAH Opp',
            StageName         = 'Prospecting',
            CloseDate         = Date.today().addDays(30),
            Amount            = 1000,
            AccountId         = a.Id,
            Funding__c        = f.Id,
            Funding_Source__c = 'Support at Home'
        );
        insert o;
        return o;
    }

    private static void makeFundingItems(Id fundingId) {
        insert new maica_cc__Funding_Item__c(
            maica_cc__Funding__c          = fundingId,
            maica_cc__Budget_Type__c      = 'Assistive technology',
            maica_cc__Approved_Amount__c  = 2000,
            maica_cc__Spent_Amount__c     = 50,
            maica_cc__Remaining_Amount__c = 1950,
            maica_cc__Entry_Date__c       = Date.today().addDays(-2),
            maica_cc__Effective_Date__c   = Date.today(),
            maica_cc__End_Date__c         = Date.today().addDays(45)
        );
    }

    private static Contact makeContact(String ln) {
        Contact c = new Contact(LastName = ln, Phone='0400000000', Email=ln.toLowerCase()+'@example.com');
        insert c;
        return c;        
    }

    private static void makeCCR(Account personAcc, Contact related, Boolean poaTrue) {
        // Do NOT set Relationship__c in tests (not createable)
        insert new ContactContactRelation(
            ContactId            = personAcc.PersonContactId,
            RelatedContactId     = related.Id,
            Power_of_Attorney__c = poaTrue,
            Next_of_Kin__c       = false
        );
    }

    private static DocumentTemplate makeTemplate(String name) {
        DocumentTemplate dt = new DocumentTemplate(Name = name, IsActive = true);
        insert dt;
        return dt;
    }

    // ------------ tests ------------

    @IsTest
    static void happyPath_directOverrides_only() {
        Account a = makePersonAccount();
        maica_cc__Funding__c f = makeFunding();
        Opportunity o = makeOpp(a, f);
        makeFundingItems(f.Id);
        makeCCR(a, makeContact('Helper'), true);

        String tmplName = 'SupportAtHomeAgreement_Direct';
        makeTemplate(tmplName);
        CVWrap cvw = makeContentVersion();

        Test.startTest();
        MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
        w.recordIds = new List<Id>{ o.Id };
        w.docTemplateName = tmplName;                  // String
        w.templateContentVersionId = cvw.contentVersionId; // String
        MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        Test.stopTest();

        // During tests, your class guards insert with !Test.isRunningTest(),
        // so there should be zero DGPs inserted.
        System.assertEquals(0, [SELECT COUNT() FROM DocumentGenerationProcess]);
    }

    @IsTest
    static void missingOpp_throws() {
        Test.startTest();
        Boolean threw = false;
        try {
            MC_SAHOpportunityDocGen_Direct.Wrapper w = new MC_SAHOpportunityDocGen_Direct.Wrapper();
            // no recordIds set
            MC_SAHOpportunityDocGen_Direct.generateFromFlow(new List<MC_SAHOpportunityDocGen_Direct.Wrapper>{ w });
        } catch (AuraHandledException e) {
            threw = true;
            System.assert(e.getMessage().contains('No Opportunity Id provided'), 'Expected missing Opp error');
        }
        Test.stopTest();
        System.assert(threw);
    }
}